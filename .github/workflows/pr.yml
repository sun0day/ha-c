name: PR Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  INSTALL_PREFIX: /usr
  BUILD_TYPE: Release

jobs:
  check_format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install clang-format
      run: sudo apt-get install -y clang-format
    - name: Check Formatting
      run: |
        find . -name '*.c' -o -name '*.h' | xargs clang-format --dry-run --Werror

  build_test_on_windows:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x64, arm64]
        c_compiler: [cl]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup MSVC ARM64 Toolchain
      if: ${{ matrix.arch == 'arm64' }}
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsamd64_arm64.bat"
        set >> %GITHUB_ENV%

    - name: Configure CMake 
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        -A ${{ matrix.arch }}
    
    - name: Build library
      shell: bash
      run: cmake --build ./build --config $BUILD_TYPE

    - name: Test library 
      if: ${{ matrix.arch == 'x64' }}
      shell: bash
      run: ./build/test/Release/test.exe

    - name: Verify library on arm64
      if: ${{ matrix.arch == 'arm64' }}
      shell: cmd
      run: dumpbin /headers build\test\Release\test.exe | findstr "machine"

  build_test_on_ubuntu:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64]
        c_compiler: [gcc, clang]
        include:
        - arch: armv7
          c_compiler: arm-linux-gnueabihf-gcc
        - arch: arm64
          c_compiler: aarch64-linux-gnu-gcc
        - arch: riscv64
          c_compiler: riscv64-linux-gnu-gcc
        - arch: mips
          c_compiler: mips-linux-gnu-gcc

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      if: ${{ matrix.arch != 'x86_64' }}
      uses: docker/setup-qemu-action@v3

    - name: Install ARM Toolchain
      if: ${{ matrix.arch != 'x86_64' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static
        case "${{ matrix.arch }}" in
          armv7)   sudo apt-get install -y gcc-arm-linux-gnueabihf ;;
          arm64)   sudo apt-get install -y gcc-aarch64-linux-gnu ;;
          riscv64) sudo apt-get install -y gcc-riscv64-linux-gnu ;;
          mips)    sudo apt-get install -y gcc-mips-linux-gnu ;;
        esac

    - name: Configure CMake 
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
    
    - name: Build library
      shell: bash
      run: |
        cmake --build ./build --config $BUILD_TYPE
        file ./build/test/test

    - name: Test library
      shell: bash
      run: |
        if [ "${{ matrix.arch }}" == "x86_64" ]; then
          ./build/test/test
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          qemu-aarch64-static -L /usr/aarch64-linux-gnu ./build/test/test
        elif [ "${{ matrix.arch }}" == "armv7" ]; then
          qemu-arm-static -L /usr/arm-linux-gnueabihf ./build/test/test
        elif [ "${{ matrix.arch }}" == "riscv64" ]; then
          qemu-riscv64-static -L /usr/riscv64-linux-gnu ./build/test/test
        elif [ "${{ matrix.arch }}" == "mips" ]; then
          qemu-mips-static -L /usr/mips-linux-gnu ./build/test/test
        fi

    - name: Test installation
      if: ${{ matrix.arch == 'x86_64' }}
      run: sudo cmake --install ./build

  build_test_on_macos:
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64, arm64]
        c_compiler: [gcc, clang]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake 
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
        -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} \
        -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
    
    - name: Build library
      shell: bash
      run: |
        cmake --build ./build --config $BUILD_TYPE
        file ./build/test/test

    - name: Test library 
      shell: bash
      run: ./build/test/test

  build_test_on_bsd:
    permissions:
      contents: write
    strategy:
      matrix:
        os: [freebsd, openbsd, netbsd]
        arch: [x86-64, arm64]
        c_compiler: [clang, gcc]
        include:
        - os: freebsd
          version: '14.2'
        - os: openbsd
          version: '7.6'
        - os: netbsd
          version: '10.1'
        exclude:
        - os: netbsd
          c_compiler: clang
        - os: freebsd
          c_compiler: gcc
        - os: openbsd
          c_compiler: gcc

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build and test
      uses: cross-platform-actions/action@v0.27.0
      env:
        BUILD_TYPE: $BUILD_TYPE
      with:
        operating_system: ${{ matrix.os }}
        architecture: ${{ matrix.arch }}
        version: ${{ matrix.version }}
        shell: bash
        memory: 5G
        cpu_count: 4
        environment_variables: 'BUILD_TYPE'
        run: |
          case "${{ matrix.os }}" in
            freebsd)  sudo pkg install -y -f cmake ;;
            netbsd)   sudo pkgin -y update && sudo pkgin -y install cmake ;;
            openbsd) sudo pkg_add -u && sudo pkg_add install cmake ;;
          esac
          mkdir build && cd build
          cmake .. \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}
          cd ..
          cmake --build ./build --config $BUILD_TYPE
          file ./build/test/test
          ./build/test/test